apiVersion: v1
kind: Namespace
metadata:
  name: lustores

---

# Persistent Volume for PostgreSQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-prod-pv
  namespace: lustores
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /db

---

# Persistent Volume Claim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-prod-pvc
  namespace: lustores
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---

# Persistent Volume for Redis
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv
  namespace: lustores
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/redis

---

# Persistent Volume Claim for Redis
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: lustores
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---

# Deployment for Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: lustores
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          command: ["redis-server", "--appendonly", "yes"]
          volumeMounts:
            - mountPath: /data
              name: redis-data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc

---

# Service for Redis
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: lustores
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379

---

# Deployment for Production Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: lustores
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: university_inventory
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: password
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
            - mountPath: /docker-entrypoint-initdb.d
              name: init-sql
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
                - -d
                - university_inventory
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
                - -d
                - university_inventory
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-prod-pvc
        - name: init-sql
          configMap:
            name: init-sql-config

---

# ConfigMap for init.sql
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-sql-config
  namespace: lustores
data:
  init.sql: |
    -- Initialize the database with required tables
    -- This file will be executed when the PostgreSQL container starts

    -- Create sessions table for session storage
    CREATE TABLE IF NOT EXISTS sessions (
      sid varchar NOT NULL COLLATE "default",
      sess json NOT NULL,
      expire timestamp(6) NOT NULL
    )
    WITH (OIDS=FALSE);

    ALTER TABLE sessions ADD CONSTRAINT session_pkey PRIMARY KEY (sid) NOT DEFERRABLE INITIALLY IMMEDIATE;

    CREATE INDEX IF NOT EXISTS IDX_session_expire ON sessions (expire);

    -- Create application tables
    CREATE TABLE IF NOT EXISTS users (
      id VARCHAR PRIMARY KEY,
      email VARCHAR NOT NULL UNIQUE,
      password_hash VARCHAR NOT NULL,
      first_name VARCHAR NOT NULL,
      last_name VARCHAR NOT NULL,
      role VARCHAR NOT NULL DEFAULT 'user',
      is_active BOOLEAN NOT NULL DEFAULT true,
      must_change_password BOOLEAN NOT NULL DEFAULT false,
      last_login TIMESTAMP,
      profile_image_url VARCHAR,
      created_at TIMESTAMP DEFAULT NOW(),
      updated_at TIMESTAMP DEFAULT NOW()
    );

    -- Notes table for system-wide notes that can be attached to items, suppliers, orders, and charge codes
    -- Must be created before tables that reference it
    CREATE TABLE IF NOT EXISTS notes (
      id SERIAL PRIMARY KEY,
      text TEXT NOT NULL,
      reference_type VARCHAR(50) NOT NULL, -- 'item', 'supplier', 'order', 'chargecode'
      reference_id VARCHAR(100) NOT NULL, -- ID of the referenced entity
      created_by VARCHAR NOT NULL REFERENCES users(id),
      created_at TIMESTAMP DEFAULT NOW(),
      updated_at TIMESTAMP DEFAULT NOW()
    );

    -- Add indexes for efficient querying
    CREATE INDEX IF NOT EXISTS idx_notes_reference ON notes(reference_type, reference_id);
    CREATE INDEX IF NOT EXISTS idx_notes_created_by ON notes(created_by);
    CREATE INDEX IF NOT EXISTS idx_notes_created_at ON notes(created_at);

    CREATE TABLE IF NOT EXISTS categories (
      id SERIAL PRIMARY KEY,
      name VARCHAR NOT NULL UNIQUE,
      description TEXT,
      created_at TIMESTAMP DEFAULT NOW(),
      updated_at TIMESTAMP DEFAULT NOW()
    );
    -- Additional tables would be added here from the full init.sql

---

# Service for Production Database
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: lustores
spec:
  selector:
    app: db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---

# Secret for Database Password
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: lustores
type: Opaque
data:
  password: <BASE64_ENCODED_PASSWORD>  # Replace with actual base64 encoded password

---

# Secret for Application Configuration
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: lustores
type: Opaque
data:
  session-secret: <BASE64_ENCODED_SESSION_SECRET>  # Replace with actual base64 encoded session secret
  jwt-secret: <BASE64_ENCODED_JWT_SECRET>  # Replace with actual base64 encoded JWT secret
  database-url: <BASE64_ENCODED_DATABASE_URL>  # Replace with actual base64 encoded database URL

---

# Deployment for Production App
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  namespace: lustores
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
        - name: app
          image: st7ma784/lustores:latest
          ports:
            - containerPort: 5000
          env:
            - name: NODE_ENV
              value: production
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: app-secret
                  key: database-url
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: app-secret
                  key: session-secret
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: app-secret
                  key: jwt-secret
            - name: JWT_EXPIRES_IN
              value: "7d"
            - name: HTTPS
              value: "true"
            - name: FORCE_HTTPS
              value: "true"
            - name: DOMAIN
              value: "localhost"  # Replace with actual domain
            - name: EMAIL
              value: "admin@localhost"  # Replace with actual email
            - name: REPL_ID
              value: "prod-repl"
            - name: REPLIT_DOMAINS
              value: ""  # Set as needed
            - name: ISSUER_URL
              value: ""  # Set as needed
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          livenessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3

---

# Service for Production App
apiVersion: v1
kind: Service
metadata:
  name: app
  namespace: lustores
spec:
  selector:
    app: app
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000

---

# Deployment for Replit Auth
apiVersion: apps/v1
kind: Deployment
metadata:
  name: replit-auth
  namespace: lustores
spec:
  replicas: 1
  selector:
    matchLabels:
      app: replit-auth
  template:
    metadata:
      labels:
        app: replit-auth
    spec:
      containers:
        - name: replit-auth
          image: st7ma784/replitauth:latest
          ports:
            - containerPort: 3001
          env:
            - name: NODE_ENV
              value: production
            - name: PORT
              value: "3001"
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: app-secret
                  key: jwt-secret
            - name: ALLOWED_ORIGINS
              value: "https://localhost"  # Replace with actual domain
          livenessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3

---

# Service for Replit Auth
apiVersion: v1
kind: Service
metadata:
  name: replit-auth
  namespace: lustores
spec:
  selector:
    app: replit-auth
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001

---

# Deployment for Nginx
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: lustores
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
            - containerPort: 443
          env:
            - name: DOMAIN
              value: "localhost"  # Replace with actual domain
            - name: NGINX_HOST
              value: "localhost"  # Replace with actual domain
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/templates
            - name: nginx-http-config
              mountPath: /etc/nginx/nginx-http.conf
              subPath: nginx-http.conf
            - name: certbot-conf
              mountPath: /etc/letsencrypt
            - name: certbot-www
              mountPath: /var/www/certbot
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
        - name: nginx-http-config
          configMap:
            name: nginx-http-config
        - name: certbot-conf
          emptyDir: {}
        - name: certbot-www
          emptyDir: {}

---

# Service for Nginx
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: lustores
spec:
  selector:
    app: nginx
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
    - name: https
      protocol: TCP
      port: 443
      targetPort: 443
  type: LoadBalancer

---

# ConfigMap for Nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: lustores
data:
  default.conf.template: |
    events {
        worker_connections 1024;
    }

    http {
        # Basic settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;

        # DNS resolver for dynamic upstream resolution
        resolver 127.0.0.11 valid=10s ipv6=off;
        resolver_timeout 5s;

        # MIME types
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

        # Upstream backend
        upstream app {
            server app:5000 max_fails=3 fail_timeout=30s weight=1;
            keepalive 32;
            keepalive_requests 1000;
            keepalive_timeout 60s;
        }

        upstream replit-auth {
            server replit-auth:3001 max_fails=3 fail_timeout=30s weight=1;
            keepalive 32;
        }

        # HTTP server block
        server {
            listen 80;
            server_name ${NGINX_HOST};

            # Security headers
            add_header X-Frame-Options DENY always;
            add_header X-Content-Type-Options nosniff always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy strict-origin-when-cross-origin always;

            # Let's Encrypt challenge
            location /.well-known/acme-challenge/ {
                root /var/www/certbot;
            }

            # Redirect HTTP to HTTPS
            location / {
                return 301 https://$server_name$request_uri;
            }
        }

        # HTTPS server block
        server {
            listen 443 ssl http2;
            server_name ${NGINX_HOST};

            # SSL configuration
            ssl_certificate /etc/letsencrypt/live/${NGINX_HOST}/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/${NGINX_HOST}/privkey.pem;
            
            # Modern SSL configuration
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;

            # Security headers
            add_header Strict-Transport-Security "max-age=63072000" always;
            add_header X-Frame-Options DENY always;
            add_header X-Content-Type-Options nosniff always;
            add_header X-XSS-Protection "1; mode=block" always;

            # Main application proxy
            location / {
                proxy_pass http://app;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                proxy_read_timeout 300s;
                proxy_connect_timeout 75s;

                # Rate limiting
                limit_req zone=api burst=20 nodelay;
            }

            # Replit Auth service proxy
            location /auth/ {
                proxy_pass http://replit-auth/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
            }
        }
    }

---

# ConfigMap for Nginx HTTP configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-http-config
  namespace: lustores
data:
  nginx-http.conf: |
    events {
        worker_connections 1024;
    }

    http {
        # Basic settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;

        # MIME types
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

        upstream app {
            server app:5000 max_fails=3 fail_timeout=30s weight=1;
            keepalive 32;
            keepalive_requests 1000;
            keepalive_timeout 60s;
        }

        # HTTP-only server for development/testing
        server {
            listen 80;
            server_name localhost;

            location / {
                proxy_pass http://app;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;

                # Rate limiting
                limit_req zone=api burst=20 nodelay;
            }
        }
    }

---

# Deployment for GitHub Actions Runner
apiVersion: apps/v1
kind: Deployment
metadata:
  name: github-runner
  namespace: lustores
spec:
  replicas: 1
  selector:
    matchLabels:
      app: github-runner
  template:
    metadata:
      labels:
        app: github-runner
    spec:
      containers:
        - name: github-runner
          image: myoung34/github-runner:latest
          env:
            - name: REPO_URL
              value: "https://github.com/st7ma784/LUStores"
            - name: RUNNER_NAME
              value: "lustores-prod-runner"
            - name: RUNNER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github-runner-secret
                  key: token
            - name: LABELS
              value: "lustores,production,docker,self-hosted"
            - name: EPHEMERAL
              value: "true"
            - name: DISABLE_AUTOMATIC_DEREGISTRATION
              value: "false"
            - name: RUNNER_GROUP
              value: "default"
            - name: RUNNER_ALLOW_RUNASROOT
              value: "true"
          volumeMounts:
            - name: docker-sock
              mountPath: /var/run/docker.sock
            - name: runner-data
              mountPath: /tmp/runner
          securityContext:
            privileged: true
          livenessProbe:
            exec:
              command:
                - pgrep
                - -f
                - "Runner.Listener"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
        - name: runner-data
          emptyDir: {}

---

# Secret for GitHub Runner
apiVersion: v1
kind: Secret
metadata:
  name: github-runner-secret
  namespace: lustores
type: Opaque
data:
  token: <BASE64_ENCODED_RUNNER_TOKEN>  # Replace with actual base64 encoded GitHub runner token