---
# tasks file for rpi_head_node

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0
  changed_when: true

- name: Remove swap from fstab
  lineinfile:
    path: /etc/fstab
    regexp: '.*swap.*'
    state: absent

- name: Load br_netfilter module
  modprobe:
    name: br_netfilter
    state: present

- name: Set sysctl values for Kubernetes networking
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  loop:
    - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { key: 'net.ipv4.ip_forward', value: '1' }

- name: Check if cgroup is already enabled
  command: grep -q "cgroup_enable=memory cgroup_memory=1" /boot/cmdline.txt
  register: cgroup_check
  changed_when: false
  ignore_errors: yes

- name: Enable memory cgroup
  lineinfile:
    path: /boot/cmdline.txt
    regexp: '^(.*)$'
    line: '\1 cgroup_enable=memory cgroup_memory=1'
    backrefs: yes
  when: cgroup_check.rc != 0
  notify: Reboot RPi

- name: Flush handlers to apply reboot if needed
  meta: flush_handlers

- name: Wait for SSH to come back up
  wait_for_connection:
    delay: 10
    timeout: 300


- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install dependencies for adding apt repositories
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache_retries: 3
    update_cache_retry_max_delay: 60

- name: Create directory for apt keyrings
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Kubernetes apt key
  get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
    dest: /tmp/kubernetes-apt-keyring.gpg
    mode: '0644'
    validate_certs: yes
    timeout: 30

- name: Add Kubernetes GPG key
  command: >
    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add Kubernetes APT repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
    state: present
    filename: kubernetes
    update_cache: yes
    validate_certs: yes

- name: Install required packages
  apt:
    name:
      - containerd
      - kubelet
      - kubeadm
      - kubectl
      - v4l-utils
    state: present
    update_cache: no  # We already updated the cache
    retries: 3
    delay: 5

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Enable camera interface
  command: raspi-config nonint do_camera 0
  changed_when: true
  notify: Reboot RPi

- name: Add user to video group
  user:
    name: "{{ ansible_user }}"
    groups: video
    append: yes

- name: Create containerd config directory
  file:
    path: /etc/containerd
    state: directory

- name: Configure containerd for RPi camera access
  template:
    src: containerd-config-rpi.toml.j2
    dest: /etc/containerd/config.toml
  notify: Restart containerd

- name: Initialize the Kubernetes cluster
  command: kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=Mem,SystemVerification
  args:
    creates: /etc/kubernetes/admin.conf
  async: 900 # 15 minutes
  poll: 15
  register: kubeadm_init

- name: Store join command
  set_fact:
    join_command: "{{ kubeadm_init.stdout_lines | select('match', '^kubeadm join') | list | last }}"

- name: Display join command
  debug:
    msg: "Run this command on worker nodes to join the cluster: {{ join_command }}"

- name: Create .kube directory
  file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Apply Flannel CNI
  command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
  become: yes
  become_user: "{{ ansible_user }}"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  changed_when: true
