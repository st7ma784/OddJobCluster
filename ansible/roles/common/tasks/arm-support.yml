---
# ARM Platform Support Tasks
# Handles architecture detection and ARM-specific configurations

- name: Detect system architecture
  command: uname -m
  register: system_arch
  changed_when: false

- name: Set architecture facts
  set_fact:
    is_arm64: "{{ system_arch.stdout in ['aarch64', 'arm64'] }}"
    is_armhf: "{{ system_arch.stdout in ['armv7l', 'armhf'] }}"
    is_x86_64: "{{ system_arch.stdout == 'x86_64' }}"
    detected_arch: "{{ system_arch.stdout }}"

- name: Display detected architecture
  debug:
    msg: "Detected architecture: {{ detected_arch }}"

- name: Install ARM-specific packages (ARM64)
  package:
    name:
      - python3-dev
      - build-essential
      - libffi-dev
      - libssl-dev
    state: present
  when: is_arm64

- name: Configure ARM-specific kernel parameters (Raspberry Pi)
  lineinfile:
    path: /boot/firmware/cmdline.txt
    regexp: '^(.*)$'
    line: '\1 cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1'
    backrefs: yes
  when: 
    - is_arm64 or is_armhf
    - ansible_board_name is defined and 'raspberry' in ansible_board_name.lower()
  notify: reboot required

- name: Configure GPU memory split for headless Raspberry Pi
  lineinfile:
    path: /boot/firmware/config.txt
    line: "gpu_mem=16"
    create: yes
  when: 
    - is_arm64 or is_armhf
    - ansible_board_name is defined and 'raspberry' in ansible_board_name.lower()

- name: Set CPU governor to performance (ARM)
  shell: |
    echo 'performance' | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
  when: is_arm64 or is_armhf
  ignore_errors: yes

- name: Configure swap for ARM devices
  block:
    - name: Check current swap
      command: swapon --show
      register: current_swap
      changed_when: false
      failed_when: false

    - name: Configure dphys-swapfile (Raspberry Pi)
      lineinfile:
        path: /etc/dphys-swapfile
        regexp: '^#?CONF_SWAPSIZE='
        line: 'CONF_SWAPSIZE=2048'
      when: 
        - is_arm64 or is_armhf
        - ansible_os_family == "Debian"
      notify: restart dphys-swapfile

- name: Install Docker with ARM support
  block:
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker repository (ARM64)
      apt_repository:
        repo: "deb [arch=arm64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      when: 
        - is_arm64
        - ansible_os_family == "Debian"

    - name: Add Docker repository (ARMHF)
      apt_repository:
        repo: "deb [arch=armhf] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      when: 
        - is_armhf
        - ansible_os_family == "Debian"

    - name: Install Docker CE
      package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

- name: Configure containerd for ARM
  template:
    src: containerd-config-arm.toml.j2
    dest: /etc/containerd/config.toml
    backup: yes
  notify: restart containerd

- name: Create ARM-specific systemd overrides
  file:
    path: /etc/systemd/system/{{ item }}.service.d
    state: directory
  loop:
    - kubelet
    - containerd
  when: is_arm64 or is_armhf

- name: Configure kubelet for ARM devices
  template:
    src: kubelet-arm-override.conf.j2
    dest: /etc/systemd/system/kubelet.service.d/20-arm-override.conf
  notify: 
    - reload systemd
    - restart kubelet
  when: is_arm64 or is_armhf

- name: Set resource limits for ARM nodes
  lineinfile:
    path: /etc/default/kubelet
    line: 'KUBELET_EXTRA_ARGS="--max-pods={{ arm_max_pods | default(20) }} --kube-reserved=cpu={{ arm_kube_reserved_cpu | default("100m") }},memory={{ arm_kube_reserved_memory | default("200Mi") }}"'
    create: yes
  when: is_arm64 or is_armhf
  notify: restart kubelet

- name: Install ARM-optimized monitoring tools
  package:
    name:
      - htop
      - iotop
      - sysstat
      - lm-sensors
    state: present

- name: Configure temperature monitoring (Raspberry Pi)
  cron:
    name: "Temperature monitoring"
    minute: "*/5"
    job: "vcgencmd measure_temp >> /var/log/rpi-temp.log 2>/dev/null || echo '$(date): $(cat /sys/class/thermal/thermal_zone0/temp | awk \"{print \\$1/1000}\")Â°C' >> /var/log/arm-temp.log"
  when: is_arm64 or is_armhf

- name: Create ARM node info script
  template:
    src: arm-node-info.sh.j2
    dest: /usr/local/bin/arm-node-info
    mode: '0755'
  when: is_arm64 or is_armhf
